"""Initial migration for all tables

Revision ID: 0c2c5fe239e3
Revises: 
Create Date: 2025-10-09 22:15:53.743916

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0c2c5fe239e3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_admin_actions_id'), 'admin_actions', ['id'], unique=False)
    op.alter_column('ai_analyses', 'input_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('ai_analyses', 'output_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('ai_analyses', 'confidence',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('ai_analyses', 'processing_time',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.create_index(op.f('ix_ai_analyses_id'), 'ai_analyses', ['id'], unique=False)
    op.alter_column('audit_logs', 'entity_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='entity_id::uuid')
    op.alter_column('audit_logs', 'old_values',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'new_values',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.alter_column('customer_stages', 'card_display_fields',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text('\'["name", "phone", "email"]\'::jsonb'))
    op.create_index(op.f('ix_customer_stages_id'), 'customer_stages', ['id'], unique=False)
    op.alter_column('customers', 'custom_fields',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.create_index(op.f('ix_customers_id'), 'customers', ['id'], unique=False)
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.create_index(op.f('ix_messages_whatsapp_id'), 'messages', ['whatsapp_id'], unique=False)
    op.create_index(op.f('ix_settings_id'), 'settings', ['id'], unique=False)
    op.alter_column('subscription_plans', 'price',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.create_index(op.f('ix_subscription_plans_id'), 'subscription_plans', ['id'], unique=False)
    op.create_index(op.f('ix_telegram_codes_id'), 'telegram_codes', ['id'], unique=False)
    op.create_index(op.f('ix_telegram_sessions_id'), 'telegram_sessions', ['id'], unique=False)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_whatsapp_sessions_id'), 'whatsapp_sessions', ['id'], unique=False)
    op.alter_column('workflow_executions', 'execution_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_index(op.f('ix_workflow_executions_id'), 'workflow_executions', ['id'], unique=False)
    op.alter_column('workflow_node_templates', 'input_schema',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('workflow_node_templates', 'output_schema',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('workflow_node_templates', 'default_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.create_index(op.f('ix_workflow_node_templates_id'), 'workflow_node_templates', ['id'], unique=False)
    op.alter_column('workflow_step_executions', 'input_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('workflow_step_executions', 'output_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_index(op.f('ix_workflow_step_executions_id'), 'workflow_step_executions', ['id'], unique=False)
    op.alter_column('workflows', 'nodes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('workflows', 'edges',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.create_index(op.f('ix_workflows_id'), 'workflows', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workflows_id'), table_name='workflows')
    op.alter_column('workflows', 'edges',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('workflows', 'nodes',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_index(op.f('ix_workflow_step_executions_id'), table_name='workflow_step_executions')
    op.alter_column('workflow_step_executions', 'output_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('workflow_step_executions', 'input_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index(op.f('ix_workflow_node_templates_id'), table_name='workflow_node_templates')
    op.alter_column('workflow_node_templates', 'default_config',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('workflow_node_templates', 'output_schema',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('workflow_node_templates', 'input_schema',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_index(op.f('ix_workflow_executions_id'), table_name='workflow_executions')
    op.alter_column('workflow_executions', 'execution_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index(op.f('ix_whatsapp_sessions_id'), table_name='whatsapp_sessions')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_telegram_sessions_id'), table_name='telegram_sessions')
    op.drop_index(op.f('ix_telegram_codes_id'), table_name='telegram_codes')
    op.drop_index(op.f('ix_subscription_plans_id'), table_name='subscription_plans')
    op.alter_column('subscription_plans', 'price',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.drop_index(op.f('ix_settings_id'), table_name='settings')
    op.drop_index(op.f('ix_messages_whatsapp_id'), table_name='messages')
    op.drop_index(op.f('ix_messages_id'), table_name='messages')
    op.drop_index(op.f('ix_customers_id'), table_name='customers')
    op.alter_column('customers', 'custom_fields',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_index(op.f('ix_customer_stages_id'), table_name='customer_stages')
    op.alter_column('customer_stages', 'card_display_fields',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text('\'["name", "phone", "email"]\'::jsonb'))
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.alter_column('audit_logs', 'new_values',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('audit_logs', 'old_values',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('audit_logs', 'entity_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_index(op.f('ix_ai_analyses_id'), table_name='ai_analyses')
    op.alter_column('ai_analyses', 'processing_time',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('ai_analyses', 'confidence',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('ai_analyses', 'output_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('ai_analyses', 'input_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_index(op.f('ix_admin_actions_id'), table_name='admin_actions')
    op.create_table('custom_entity_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('entity_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['entity_type_id'], ['custom_entity_types.id'], name=op.f('fk_custom_entity_records_entity_type_id')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_custom_entity_records_user_id')),
    sa.PrimaryKeyConstraint('id', name=op.f('custom_entity_records_pkey'))
    )
    op.create_table('custom_entity_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('custom_entity_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_custom_entity_types_user_id'),
    sa.PrimaryKeyConstraint('id', name='custom_entity_types_pkey'),
    sa.UniqueConstraint('user_id', 'name', name='custom_entity_types_user_id_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('custom_fields',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entity_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('field_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('field_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_searchable', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['entity_type_id'], ['custom_entity_types.id'], name=op.f('fk_custom_fields_entity_type_id')),
    sa.PrimaryKeyConstraint('id', name=op.f('custom_fields_pkey')),
    sa.UniqueConstraint('field_key', name=op.f('custom_fields_field_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
